Strategy Pattern: 
        --> Main Idea: Using Composition rather than Inheritance.
                    Inheritance is not intended for code re-use.
        --> Defines a family of algorithms, encapsulates each one and makes them Interchangeable.
            Lets the algorithm vary independent from the clients that use it.
        -->

example: 
        ScreenShots
    
Solution: 
        --> Create Interface
        --> This Converts is-a behavious to has-a behaviour
        --> Every Duck has a quack behaviour and fly behaviour.

References:
        --> https://refactoring.guru/design-patterns/strategy
        --> https://www.journaldev.com/1754/strategy-design-pattern-in-java-example-tutorial


