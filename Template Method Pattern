Template Method Pattern: 
		--> Similar to Strategy pattern, but we  implement an abstract class,
			because the templateMethod of abstract class
			implements the abstract methods.
		-->Have templateMethod as final to avoid child classes to inherit.
		-->Poster with specefic template
		-->Defines the skeleton of an algorithm in an operation, deferring some steps
		   to sub-classes. Template Method lets subclasses redefine certain steps of 
		   an algorithm without changing the algorithm's structure. 

When to Use:
        --> When Some method needs to be same for all the classes but it depends
			on other functions which differs for each subclasses.
		--> https://youtu.be/7ocpwK9uesw?t=2131
			the video starting from here explains ideal scenario


Code:
        https://youtu.be/7ocpwK9uesw




Design Principle

    Identify the aspects of your
    application that vary and separate
    them from what stays the same. 

    Program to an interface, not an
    implementation

    Favor composition over inheritance.

    Strive for loosely coupled designs
    between objects that interact.

    Classes should be open
    for extension, but closed for
    modifi cation.

    Conditionals returning provokes if-else 
    condtions in your system.(*BAD THING)

    designs should closed for modificatiion
    but open for extension.

    identify the aspects that vary and 
    separate them from what stays the same.

    Depend upon abstractions. Do not
    depend upon concrete classes.
